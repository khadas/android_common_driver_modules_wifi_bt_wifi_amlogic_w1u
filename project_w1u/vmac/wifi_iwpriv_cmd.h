#ifndef __WIFI_IWPRIV_CMD_H
#define __WIFI_IWPRIV_CMD_H
#include <net/iw_handler.h>

extern struct iw_handler_def w1_iw_handle;

#define CALI_ADDR_NUM(x1,x2) (((x2) - (x1)) / 4 + 1)
#define RF_TOP_ADDR_START 0xff000000
#define RF_TOP_ADDR_END 0xff0000b4
#define RF_TOP_ADDR_NUM CALI_ADDR_NUM(RF_TOP_ADDR_START, RF_TOP_ADDR_END)
#define RF_SX_ADDR_START 0xff000400
#define RF_SX_ADDR_EDN 0xff0004c8
#define RF_SX_ADDR_NUM CALI_ADDR_NUM(RF_SX_ADDR_START, RF_SX_ADDR_EDN)
#define RF_TX_ADDR_START 0xff000800
#define RF_TX_ADDR_END 0xff000838
#define RF_TX_ADDR_NUM CALI_ADDR_NUM(RF_TX_ADDR_START, RF_TX_ADDR_END)
#define RF_RX_ADDR_START 0xff000c00
#define RF_RX_ADDR_END 0xff000d7c
#define RF_RX_ADDR_NUM CALI_ADDR_NUM(RF_RX_ADDR_START, RF_RX_ADDR_END)
#define ADDA_CORE_ADDR_START 0x00a0e000
#define ADDA_CORE_ADDR_END 0x00a0e01c
#define ADDA_CORE_ADDR_NUM CALI_ADDR_NUM(ADDA_CORE_ADDR_START, ADDA_CORE_ADDR_END)
#define ADDA_XMIT_ADDR_START 0x00a0e400
#define ADDA_XMIT_ADDR_END 0x00a0e630
#define ADDA_XMIT_ADDR_NUM CALI_ADDR_NUM(ADDA_XMIT_ADDR_START, ADDA_XMIT_ADDR_END)
#define ADDA_RECV_ADDR_START 0x00a0e800
#define ADDA_RECV_ADDR_END 0x00a0e868
#define ADDA_RECV_ADDR_NUM CALI_ADDR_NUM(ADDA_RECV_ADDR_START, ADDA_RECV_ADDR_END)
#define ADDA_ESTI_ADDR_START 0x00a0ec00
#define ADDA_ESTI_ADDR_END 0x00a0ee64
#define ADDA_ESTI_ADDR_NUM CALI_ADDR_NUM(ADDA_ESTI_ADDR_START, ADDA_ESTI_ADDR_END)
#define AGC_ADDR_START 0x00a08000
#define AGC_ADDR_END 0x00a08300
#define AGC_ADDR_NUM CALI_ADDR_NUM(AGC_ADDR_START, AGC_ADDR_END)
#define OFDM_ADDR_START 0x00a09000
#define OFDM_ADDR_END 0x00a09324
#define OFDM_ADDR_NUM CALI_ADDR_NUM(OFDM_ADDR_START, OFDM_ADDR_END)
#define PHY_ADDR_START 0x00a0b000
#define PHY_ADDR_END 0x00a0b248
#define PHY_ADDR_NUM CALI_ADDR_NUM(PHY_ADDR_START, PHY_ADDR_END)
#define AON_REG_ADDR_START 0x00f01000
#define AON_REG_ADDR_END 0x00f0107c
#define AON_REG_ADDR_NUM CALI_ADDR_NUM(AON_REG_ADDR_START, AON_REG_ADDR_END)
enum
{
    RF_TOP_SEQ = 0,
    RF_SX_SEQ,
    RF_TX_SEQ,
    RF_RX_SEQ,
    ADDA_CORE_SEQ,
    ADDA_XMIT_SEQ,
    ADDA_RECV_SEQ,
    ADDA_ESTI_SEQ,
    AGC_SEQ,
    OFDM_SEQ,
    PHY_SEQ,
    AON_SEQ,
    DUMP_REG_SEQ_MAX,
};

typedef struct
{
    int addr_start;
    int addr_end;
    int num;
}reg_addr_attr_t;

enum aml_iwpriv_subcmd
{
    AML_IWP_ADDBA_REQ = 1,
    AML_IWP_AMSDU_STATE = 2,
    AML_IWP_AMPDU_STATE = 3,
    AML_IWP_UDP_INFO = 4,
    AML_IWP_COUNTRY = 5,
    AML_IWP_11H = 6,
    AML_IWP_ARP_RX = 7,
    AML_IWP_CHAN_LIST = 8,
    AML_IWP_ROAM_THRESH_2G = 9,
    AML_IWP_ROAM_THRESH_5G = 10,
    AML_IWP_ROAM_MODE = 11,
    AML_IWP_MARK_DFS_CHAN = 12,
    AML_IWP_UNMARK_DFS_CHAN = 13,
    AML_IWP_WEAK_THR_NARROW = 14,
    AML_IWP_WEAK_THR_WIDE = 15,
    AML_IWP_EAT_COUNT = 16,
    AML_IWP_AGGR_THRESH = 17,
    AML_IWP_HEART_INTERVAL = 18,
    AML_IWP_CHIP_ID = 19,
    AML_IWP_WIFI_MAC = 20,
    AML_IWP_AP_IP = 21,
    AML_IWP_ROAM_CHAN = 22,
    AML_IWP_BSS_COEX = 23,
    AML_IWP_TXAGGR_STA = 24,
    AML_IWP_SESSION = 25,
    AML_IWP_P2P_DEV_ID = 26,
    AML_IWP_WMM_AC_DELTS = 27,
    AML_IWP_SHORT_GI = 28,
    AML_IWP_DYNAMIC_BW = 29,
    AML_IWP_CCA_BUSY_CHECK = 30,
    AML_IWP_PHY_STATISTIC = 31,
    AML_IWP_PRINT_VERSION = 32,
    AML_IWP_SET_REG = 33,
    AML_IWP_GET_REG = 34,
    AML_IWP_GET_TX_STATUS = 35,
    AML_IWP_ENABLE_FW_LOG = 36,
    AML_IWP_LEGACY_SET_REG = 37,
    AML_IWP_LEGACY_GET_REG = 38,
    AML_IWP_SET_BCN_INTERVAL = 39,
    AML_IWP_SET_LDPC = 40,
    AML_IWP_SET_BEAMFORMING = 41,
    AML_IWP_SET_SCAN_TIME_IDLE = 42,
    AML_IWP_SET_SCAN_TIME_CONNECT = 43,
    AML_IWP_SET_SCAN_HANG = 44,
    AML_IWP_EN_BTWIFI_COEX = 45,
    AML_IWP_SET_COEXIST_MAX_MISS_BCN_CNT = 46,
    AML_IWP_SET_COEXIST_REQ_TIMEOUT = 47,
    AML_IWP_SET_COEXIST_NOT_GRANT_WEIGHT = 48,
    AML_IWP_SET_RATE_LEGACY = 49,
    AML_IWP_SET_RATE_HT = 50,
    AML_IWP_SET_RATE_VHT = 51,
    AML_IWP_SET_RATE_AUTO = 52,
    AML_IWP_SET_POWER = 53,
    AML_IWP_SET_CHL_RSSI = 54,
    AML_IWP_SET_BURST = 55,
    AML_IWP_SET_UAPSD = 56,
    AML_IWP_SET_PT_RX_START = 57,
    AML_IWP_SET_PT_RX_STOP = 58,
    AML_IWP_SET_SCAN_PRI = 59,
    AML_IWP_SET_BE_BK_NOQOS_PRI = 60,
    AML_IWP_SET_FETCH_PKT_METHOD = 61,
    AML_IWP_SET_FRAG_THRESHOLD = 62,
    AML_IWP_SET_PREAMBLE_TYPE = 63,
    AML_IWP_SET_FIX_BAND = 64,
    AML_IWP_SET_GAIN = 65,
    AML_IWP_SET_TPC = 66,
    AML_IWP_SET_DEV_SN = 67,
    AML_IWP_GET_DEV_SN = 68,
    AML_IWP_SET_WIFI_MAC = 69,
    AML_IWP_GET_WIFI_MAC = 70,
    AML_IWP_SET_BT_MAC = 71,
    AML_IWP_GET_BT_MAC = 72,
    AML_IWP_SET_TXPW_PLAN = 73,
    AML_IWP_SET_MAC_MODE = 74,
    AML_IWP_GET_HOST_LOG = 75,
    AML_IWP_GET_FW_LOG = 76,
    AML_IWP_SET_RECOVERY = 77,
    AML_IWP_GET_EFUSE = 78,
    AML_IWP_SET_EFUSE = 79,
    AML_IWP_GET_SPEC_REGS = 80,
    AML_IWP_GET_EN_RF_TEST = 81,
};

extern void dump_spec_regs_val(struct wlan_net_vif *wnet_vif, int reg_domain);
extern unsigned char aml_iwpriv_get_band(void);
int aml_set_debug_modules(char *debug_str);

extern unsigned char g_iwpriv_get_spec_regs_flag;
#endif
